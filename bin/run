#!/usr/bin/env python
"""CLI for running TFE jobs."""

import os
import argparse
from pathlib import Path
from urllib.parse import urlparse
from urllib.request import urlretrieve

import numpy as np
import tensorflow as tf
from tensorflow.python.platform import gfile
import tf_encrypted as tfe
from tf_encrypted.protocol import Pond, SecureNN

enable_events_monitor = os.environ.get('TFE_MONITOR_EVENTS') is not None
enable_traces = os.environ.get('TFE_TRACE') is not None
enable_debug = os.environ.get('TFE_DEBUG') is not None

tfe.set_tfe_events_flag(enable_events_monitor)
tfe.set_tfe_trace_flag(enable_traces)
tfe.set_tfe_debug_flag(enable_debug)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--protocol_name", type=str, default='securenn', help="Protocol name")
parser.add_argument(
    "--model_name", type=str, default='', help="Model name")
parser.add_argument(
    "--batch_size", type=int, default=1, help="Batch size")
parser.add_argument(
    "--model_url", type=str, default='', help="Model's public URL")
parser.add_argument(
    '--input_file', type=str, default="",
    help='load the data from a numpy file format (.npy)')
parser.add_argument(
    '--plaintext', action='store_true', help='Run the model in plaintext')
parser.add_argument(
    '--epochs', type=int, default=10,
    help='Number of times to run a prediction')
config = parser.parse_args()

if config.protocol_name == 'securenn':
  tfe.set_protocol(SecureNN())
else:
  tfe.set_protocol(Pond())

model_file = config.model_name
model_path = Path(model_file)


if not model_path.is_file() and config.model_url:
  def is_valid_url(url, qualifying=None):
    qualifying = ('scheme', 'netloc') if qualifying is None else qualifying
    token = urlparse(url)
    return all([getattr(token, qualifying_attr)
                for qualifying_attr in qualifying])

  if is_valid_url(config.model_url):
    print('Downloading model from URL: {}'.format(config.model_url))
    model_file, _ = urlretrieve(config.model_url)
  else:
    raise Exception('Invalid URL given: {}'.format(config.model_url))

tf.reset_default_graph()

input_spec = []
with gfile.GFile(model_file, 'rb') as f:
  print('Loading model: {}'.format(model_file))
  graph_def = tf.GraphDef()
  graph_def.ParseFromString(f.read())

  for node in graph_def.node:
    if node.op != "Placeholder":
      continue

    not_batch = [int(d.size) for d in node.attr['shape'].shape.dim[1:]]
    input_shape = [config.batch_size] + not_batch

    input_spec.append({
        'name': node.name,
        'dtype': node.attr['dtype'].type,
        'shape': input_shape
    })

inputs = []
for i, spec in enumerate(input_spec):
  def scope(provider_index, spec_in: dict):
    def provide_input() -> tf.Tensor:
      pl = tf.placeholder(
          tf.float32,
          shape=spec_in['shape'],
          name="api/{}".format(provider_index))
      return pl

    return provide_input

  inputs.append(scope(i, spec))


if config.input_file:
  # TODO: Currently this allows for only one input
  # If we want to load models with multiple diffrent inputs
  # We will need to save our inputs as a list of np.array
  input_data = [np.load(config.input_file)]
  err_msg = ("the input_data length ({}) should be equal to"
             "the number of inputs required by"
             "the loaded model ({})".format(len(input_data), len(input_spec)))
  assert len(input_data) == len(input_spec), err_msg
else:
  input_data = []
  for spec in input_spec:
    input_data.append(
        np.random.standard_normal(spec['shape']).tolist()
    )


runs = config.epochs
if config.plaintext:
  print('running prediction in plaintext')
  with tfe.Session() as sess:
    sess.graph.as_default()
    tf.import_graph_def(graph_def, name='')
    sess.run(tf.global_variables_initializer())

    # TODO This isn't a good way to get the input/output nodes
    #      and we shouldn't hardcode the input either!
    print('running', runs, 'predictions')
    for x in range(0, runs + 1):  # first run is warmup
      output = sess.graph.get_operations()[-2].values()[0]
      x_input = sess.graph.get_operations()[0].values()[0]  # noqa: W0622

      sess.run(output, {x_input: input_data}, tag='prediction')

      if x % 10 == 0:
        print('ran', x, 'epochs')

    print('ran', x, 'epochs')


else:
  print('running prediction securely')
  c = tfe.convert.Converter()
  y = c.convert(graph_def, tfe.convert.registry(), 'input-provider', inputs)

  pls = []
  for i in range(len(input_spec)):
    if i == 0:
      name = "private-input/api/{}:0".format(i)
    else:
      name = "private-input_{index}/api/{index}:0".format(index=i)
    pls.append(
        tf.get_default_graph().get_tensor_by_name(name)
    )

  with tfe.Session() as sess:
    print("initing!!!")
    sess.run(tf.global_variables_initializer())

    print("warming up")
    feed_dict = {
        pl: input_data[i] for i, pl in enumerate(pls)
    }

    print('feed_dict', feed_dict)

    output = sess.run(
        y.reveal(),
        feed_dict=feed_dict,
        tag='prediction'
    )
    print(output)

    print('running', runs, 'predictions')
    for x in range(0, runs):
      feed_dict = {
          pl: input_data[i] for i, pl in enumerate(pls)
      }

      output = sess.run(
          y.reveal(),
          feed_dict=feed_dict,
          tag='prediction'
      )

      if x % 10 == 0:
        print(x, 'runs complete')

    print(x, 'runs complete')
    print('done')
